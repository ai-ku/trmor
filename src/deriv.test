#!/usr/local/bin/xfst -f
define compat [
	"+Past2" -> "+Past",
	"+Narr2" -> "+Narr",
	"+Imp2"  -> "+Imp",
	"+WithoutHavingDoneSo2"	-> "+WithoutHavingDoneSo"
];
read lexc deriv.mtac
upper net
define mtac0
read regex [ mtac0 .o. compat ];
lower net
define mtac1

!read regex < test/Milliyet.regex
read regex < test/foo.short
define mill1

define noflect0 [ [\"^DB"]+ -> 0 || .#. ["+Noun"|"+Verb"] _ ["^DB"|.#.]];
define noflect1 [ [\"^DB"]+ -> 0 || "^DB" ["+Noun"|"+Verb"] ? _ .#. ];
define nva [["+Noun"|"+Verb"|"+Adj"] ?*];
define db $["^DB"];
define prop $["+Prop"];

read regex [[mill1 & nva & db & ~prop] .o. noflect1 ];
lower net
define mill2

define noroot [ \["+Noun"|"+Verb"|"+Adj"]* -> 0 || .#. _ ];
read regex [ mtac1 .o. noroot ];
lower net
define mtac2
read regex [[mtac2 & nva] .o. noflect1 ];
lower net
define mtac3

read regex [ mill2 - mtac3 ];
print words > deriv.missing

# define filter ~$["NULL"];
# read regex mtac .o. filter .o. compat;
# lower net
# define vupper
# load tfeaturesulx.fst
# push vupper
# compose
# upper net
# define iupper
# read regex [ vupper - iupper ];
# print words > deriv.extra

