Contents:
I.   MODEL.FST GENERATION
II.  COMPONENTS OF MAIN.LEXC
III. SPECIFICATION OF THE THREE LANGUAGES
IV.  MULTICHAR SYMBOLS IN DICT.LEXT
V.   TODO LIST


I. MODEL.FST GENERATION

Makefile
	Specifies the build rules for every generated file.

comp.xfst
	Compatibility patches.  There are certain features that are
	more easily expressed as multiple features (e.g. the four
	different forms of +Caus).  I also use some dictionary flags
	to express words that are already plural, that can take -ki,
	that need consonant voicing etc.  Comp gets rid of all that
	to make the analysis output compatible with Oflazer.

main.lexc
	Morphotactics built from various components using the
	Makefile: main.lext, multichar.lext, dict.lext, nderiv.lext,
	vderiv.lext, vflect.lext, nflect.lext.  Note that only the
	upper part of this fst is used, please ignore the lower part
	by using "upper net" i.e. this is actually an fsm that
	specifies the legal feature sequences.  Currently only
	noun/verb inflections and derivations are implemented.

yanl.xfst
	Common misspellings from TDK.

mlex.xfst
	Morphological lexicon.  This is the component that ties the
	features in the sequences specified by main.lexc (e.g. +A1pl)
	to actual phonological forms (e.g. +YIz), i.e. specifies how
	each morpheme will be realized.

phon.xfst
	Phonological rules.  This is the component that ties the
	phonological forms (e.g. +YIz) to actual surface forms
	(e.g. iz) according to vowel harmony etc.

norm.xfst
	Takes care of lowercasing and removing the circumflex marks
	for fuzzy matching.


II. COMPONENTS OF MAIN.LEXC

*.lext
	Lext is for "lexc template file".  These files are similar to
	lexc files with two important differences: (1) they may
	contain #include statements that allow including other lext
	files, (2) they may not be complete lexc files by themselves.
	A standard lexc file is created from multiple lext files using
	include.pl.  This allows us to build main.lexc in a modular
	fashion where each component can be independently built and
	tested.

main.lext
	Template file for building main.lexc.	

multichar.lext
	Multichar symbols used in all lext files.

dict.lext
	The dictionary.

nderiv.lext
	Noun derivations.

nflect.lext
	Noun inflections.

vderiv.lext
	Verb derivations.

vflect.lext
	Verb inflections.


III. SPECIFICATION OF THE THREE LANGUAGES

1. Language generated by main.lexc consists of:

!! stem
[a|b|c|ç|d|e|f|g|ğ|h|ı|i|j|k|l|m|n|o|ö|p|r|s|ş|t|u|ü|v|y|z
|A|B|C|Ç|D|E|F|G|Ğ|H|I|İ|J|K|L|M|N|O|Ö|P|R|S|Ş|T|U|Ü|V|Y|Z
|â|î|û|Â|Î|Û
|'|%-|%_]+

!! phonetic flags
["^AR"|"^CD"|"^CV"|"^VD"|"^VF"|"^Y"]*	

!! part of speech and some "^P?" flags
["+Adj"|"+Adverb"|"+Conj"|"+Det"|"+Dup"|"+Interj"
|"+Noun"|"+Noun""^P1"|"+Noun""^P2"|"+Noun""^P3"|"+Noun""^PL"
|"+Num""+Card"|"+Num""+Dist"|"+Num""+Ord"
|"+Postp""+PCAbl"|"+Postp""+PCAcc"|"+Postp""+PCDat"|"+Postp""+PCGen"|"+Postp""+PCIns"|"+Postp""+PCNom"
|"+Pron""+Demons"|"+Pron""+Pers"|"+Pron""+Quant"|"+Pron""+Ques"|"+Pron""+Reflex"
|"+Ques"|"+Verb"]

!! the following morphological flags are not part of the language,
!! they are given in dict.lext and control the continuations in main.lexc morphotactics:
!! ["+Noun""^KI"|"+Verb""^C1"|"+Verb""^C2"|"+Verb""^C3"|"+Verb""^C4"|"+Verb""^CX"|"+Verb""^RF"]

!! rest of the morphological analysis
["^DB"|"+Abl"|"+Able"|"+Acc"|"+Acquire"|"+ActOf"|"+Adamantly"|"+Adj"|"+Adverb"
|"+AfterDoingSo"|"+Agt"|"+Agt2"|"+Almost"|"+Aor"|"+AorPart"|"+AsIf"|"+AsIf2"
|"+AsLongAs"|"+A1pl"|"+A1pl2"|"+A1pl3"|"+A1sg"|"+A1sg2"|"+A2pl"|"+A2pl2"
|"+A2pl3"|"+A2pl4"|"+A2sg"|"+A2sg2"|"+A2sg3"|"+A2sg4"|"+A3pl"|"+A3pl3"|"+A3sg"
|"+A3sg3"|"+Become"|"+ByDoingSo"|"+Card"|"+Caus"|"+Caus1"|"+Caus2"|"+Caus3"
|"+Caus4"|"+Cond"|"+Conj"|"+Continue"|"+Cop"|"+Dat"|"+Demons"|"+Desr"|"+Det"
|"+Dim"|"+Dist"|"+Dup"|"+Equ"|"+EverSince"|"+FeelLike"|"+Fut"|"+FutPart"|"+Gen"
|"+Hastily"|"+Imp"|"+Imp2"|"+InBetween"|"+Inf1"|"+Inf2"|"+Inf3"|"+Ins"|"+Interj"
|"+JustLike"|"+Loc"|"+Ly"|"+Narr"|"+NarrPart"|"+Narr2"|"+Neces"|"+Neg"|"+Ness"
|"+Nom"|"+NotAbleState"|"+NotState"|"+Noun"|"+Num"|"+Opt"|"+Ord"|"+PCAbl"
|"+PCAcc"|"+PCDat"|"+PCGen"|"+PCIns"|"+PCNom"|"+Pass"|"+Past"|"+PastPart"
|"+Past2"|"+Pers"|"+Pnon"|"+Pos"|"+Postp"|"+Pres"|"+PresPart"|"+Prog1"|"+Prog2"
|"+Pron"|"+P1pl"|"+P1sg"|"+P2pl"|"+P2sg"|"+P3pl"|"+P3sg"|"+Quant"|"+Ques"
|"+Recip"|"+Reflex"|"+Rel"|"+Related"|"+Repeat"|"+Since"|"+SinceDoingSo"
|"+Start"|"+Stay"|"+Verb"|"+When"|"+While"|"+With"|"+Without"
|"+WithoutBeingAbleToHaveDoneSo"|"+WithoutHavingDoneSo"|"+WithoutHavingDoneSo2"
|"+Zero"]*


2. Language transformed by mlex.xfst consists of:

!! stem
[a|b|c|ç|d|e|f|g|ğ|h|ı|i|j|k|l|m|n|o|ö|p|r|s|ş|t|u|ü|v|y|z
|A|B|C|Ç|D|E|F|G|Ğ|H|I|İ|J|K|L|M|N|O|Ö|P|R|S|Ş|T|U|Ü|V|Y|Z
|â|î|û|Â|Î|Û
|'|%-|%_]+

!! phonetic flags
["^AR"|"^CD"|"^CV"|"^VD"|"^VF"|"^Y"]*	

!! optional apostrophe

(')

!! the P3 flag
["^P3"]*

!! suffixes: each suffix starts with a "+" and capital letters indicate phonetic groups
[a|b|c|ç|d|e|f|g|ğ|h|ı|i|j|k|l|m|n|o|ö|p|r|s|ş|t|u|ü|v|y|z
|=A|=C|=D|=I|=N|=S|=Y
|%+]*


3. Language transformed by phon.xfst consists of

!! surface form (get rid of +, convert _ to ' ')
[a|b|c|ç|d|e|f|g|ğ|h|ı|i|j|k|l|m|n|o|ö|p|r|s|ş|t|u|ü|v|y|z
|A|B|C|Ç|D|E|F|G|Ğ|H|I|İ|J|K|L|M|N|O|Ö|P|R|S|Ş|T|U|Ü|V|Y|Z
|â|î|û|Â|Î|Û
|'|%-]+


IV. MULTICHAR SYMBOLS IN DICT.LEXT

1. Phonetic flags, used in phon.xfst, attached to the word:
^AR (356)  -- indicates +Ar rather than +Ir for aorist suffix of verbs. this should be in mlex like ^C*!
^CD (39)   -- consonant doubling for nouns
^CV (3014) -- consonant voicing for nouns and verbs
^VD (209)  -- vowel drop for nouns
^VF (287)  -- vowel fronting for nouns
^Y  (24)   -- +y insertion for nouns and pronouns (?*su, ne).  this may be an mlex matter.

2. Morphological flags, used in mlex.xfst, attached to the part of speech:
   (^P3 also used in phon.xfst -- they may be handled in main)
^P1 (8)    -- plural noun first person possessive
^P2 (8)    -- plural noun second person possessive
^P3 (1719) -- compound noun that ends in possessive suffix -- how does oflazer do this?
^PL (303)  -- plural noun

3. Morphological flags, used in main.lext, attached to the part of speech:
   (The ^C* belong to mlex)
^C1 (18)   -- verb with +Ir causative suffix (default +DIr+t)
^C2 (5)    -- verb with +It causative suffix
^C3 (2)    -- verb with +Ar causative suffix
^C4 (1)    -- verb with +Art causative suffix
^CX (6)    -- verb with no causative suffix
^KI (9)    -- noun that can take +ki suffix
^RF (13)   -- verb that can take reflexive suffix

Currently mlex only handles three phenomena other than regular suffix assignment:
1. Insertion and deletion of possessives after ^P?
2. Negative +Aor and +AorPart suffix
3. Negative +Able


V. TODO LIST

+ Add closed class words to dict
+ Add exceptional flags to dict
+ Finish continuations of other parts of speech
+ Clean up the lower side of main.lexc
+ Optional apostrophe, space, capitalization
+ Add multiwords to dict
+ common misspellings: TDK has "Sikca yapilan yanlislarla dogrular" for($i=1 TO N)  http://www.tdkterim.gov.tr/yanlis/?kategori=yanlis_akan&kelimez=$i
+ common misspellings: may have to put yanlis.xfst after main
+ Compile with free software
+ Java lookup engine
- Add abbreviations: make the root form long
- Fix suffixation of multiwords, the P3 flag
- Fix suffixation of abbreviations
- Fix the persons in personal pronouns
- Better handle degil, mi, ise
- Better handle kendi
- Fix pronoun persons and cases: Pers and Demons
- Handle P1 P2
- A lot of pronouns (o, biri) require N insertion.
- Reduce compile time for phon.
- Better handle phon irregularities.
- Reimplement standard tests.
- Do we need subcategorization for Postp?
- Try avg perceptron
- Try weighted transducer
- Learn twolc
- Fix abbrevs (lex=long form), fix no-vowel tokens
- Check for commas and other punct in dict multiwords
- Finish elda test set
- Write paper: unsup vs sup, with vs without context
