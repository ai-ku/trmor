!! Ambiguous suffixes: 
!! {+Hn}, {+Hr}, {+mA}, {+mHş}, {+sA}, {+YAcAk}, {+nA}, {+sHn}, {+z}, {+Ar}, {+CA}, {+DHr}, {+sH}

define Morphemes [
    "+A1pl"		-> {+YHz},	!! {+k}, {+lHm}, {+Hz}?
    "+A1sg"		-> {+YHm},	!! {+m}, {+Hm}?
    "+A2pl"		-> {+sHnHz},	!! {+YHn}, {+YHnHz}, {+nHz}, {+nHzA}, {+HnHz}
    "+A2sg"		-> {+sHn},	!! 0, {+n}, {+nA}, {+Hn}?
    "+A3pl"		-> {+lAr},	!! {+sHnlAr}, {nlAr}
    "+A3sg"		-> 0,		!! {+sHn}
    "+Abl"		-> {+DAn},	!! {+ndAn}
    "+Able"		-> {+YAbil},	!! 0 if Neg
    "+Acc"		-> {+YH},	!! {+nH}
    "+Acquire"		-> {+lAn},
    "+ActOf"		-> {+mAcA},
    "+Adamantly"	-> {+YAsHyA},
    "+Adj"		-> 0,
    "+Adverb"		-> 0,
    "+AfterDoingSo"	-> {+YHp},
    "+Agt"		-> {+CH},	!! {+YHcH}
    "+Almost"		-> {+YAyaz},
    "+Aor"		-> {+Hr},	!! 0, {+z}, {+Ar}, {+r}
    "+AorPart"		-> {+Hr},	!! 0, {+z}, {+Ar}, {+r}
    "+AR"		-> 0,		!! New flag for AorAr exception
    "+AsIf"		-> {+CA},	!! {+CAsHnA}
    "+AsLongAs"		-> {+DHkçA},
    "+Become"		-> {+lAş},
    "+ByDoingSo"	-> {+YArAk},
    "+CAR"		-> 0,		!! New flag for causative suffix type
    "+CHR"		-> 0,		!! New flag for causative suffix type
    "+CHT"		-> 0,		!! New flag for causative suffix type
    "+C0T"		-> 0,		!! New flag for causative suffix type
    "+C00"		-> 0,		!! New flag for causative suffix type
    "+AAR"		-> 0,		!! New flag for aorist suffix type
!    "+CD"		-> "+CD",	!! Phonetic flag for consonant doubling
!    "+CV"		-> "+CV",	!! Phonetic flag for consonant voicing
    "+Card"		-> 0,
    "+Caus"		-> {+DHr},	!! {+DHr}, {+Ar}, {+Hr}, {+Ht}, {+t}
    "+Cond"		-> {+YsA},	!! {+sA}
    "+Conj"		-> 0,
    "+Continue"		-> {+YAgit},
    "+Cop"		-> {+DHr},
    "+Dat"		-> {+YA},	!! {+nA}
    "+Demons"		-> 0,
    "+Desr"		-> {+sA},
    "+Det"		-> 0,
    "+Dim"		-> {+CHk},	!! {+cHm}?
    "+Dist"		-> 0,
    "+Dup"		-> 0,
    "+Equ"		-> {+CA},	!! {+ncA}
    "+EverSince"	-> {+YAgel},
    "+FeelLike"		-> {+YAsH},
!   "+FitFor"		-> {+lHk},	!! disappeared in latest version
    "+Fut"		-> {+YAcAk},
    "+FutPart"		-> {+YAcAk},
    "+Gen"		-> {+NHn},	!! {+nHm}
    "+Hastily"		-> {+YHver},
    "+Imp"		-> 0,
    "+Imp2"		-> {+sA},
    "+InBetween"	-> {+arası},	!! {+lArarası}?
    "+Inf1"		-> {+mAk},
    "+Inf2"		-> {+mA},
    "+Inf3"		-> {+YHş},
    "+Ins"		-> {+YlA},
    "+Interj"		-> 0,
    "+JustLike"		-> {+HmsH},	!! {+sH}?
    "+Loc"		-> {+DA},	!! {+ndA},
    "+Ly"		-> {+CA},
    "+Narr"		-> {+mHş},
    "+Narr2"		-> {+YmHş},
    "+NarrPart"		-> {+mHş},
    "+Neces"		-> {+mAlH},
    "+Neg"		-> {+mA},	!! {+YAmA}
    "+Ness"		-> {+lHk},
    "+Nom"		-> 0,
    "+NotAbleState"	-> {+YAmAzlHk},
    "+NotState"		-> {+mAzlHk},
    "+Noun"		-> 0,
    "+Num"		-> 0,
    "+Opt"		-> {+YA},
    "+Ord"		-> 0,
    "+P1"		-> 0,		!! New flag for stems with possessives
    "+P1pl"		-> {+HmHz},
    "+P1sg"		-> {+Hm},
    "+P2"		-> 0,		!! New flag for stems with possessives
    "+P2pl"		-> {+HnHz},
    "+P2sg"		-> {+Hn},
    "+P3"		-> 0,		!! New flag for compound nouns
    "+P3pl"		-> {+lArH},	!! {+SH}
    "+P3sg"		-> {+SH},	!! {+YH}?
    "+PCAbl"		-> 0,
    "+PCAcc"		-> 0,
    "+PCDat"		-> 0,
    "+PCGen"		-> 0,
    "+PCIns"		-> 0,
    "+PCNom"		-> 0,
    "+PL"		-> 0,		!! New flag for plural stems
    "+Pass"		-> {+Hl},	!! {+Hn}, {+HnHl}
    "+Past"		-> {+DH},
    "+Past2"		-> {+YDH},	!! {+DH},
    "+PastPart"		-> {+DHk},
    "+Pers"		-> 0,
    "+Pnon"		-> 0,
    "+Pos"		-> 0,
    "+Postp"		-> 0,
    "+Pres"		-> 0,
    "+PresPart"		-> {+YAn},
    "+Prog1"		-> {+Hyor},
    "+Prog2"		-> {+mAktA},
    "+Pron"		-> 0,
    "+Prop"		-> 0,
    "+Quant"		-> 0,
    "+Ques"		-> 0,
    "+Recip"		-> {+Hş},
    "+Reflex"		-> {+Hn},
    "+Rel"		-> {+ki},
    "+Related"		-> {+sAl},	!! {+k}
    "+Repeat"		-> {+YAdur},
    "+SU"		-> 0,		!! New flag for special handling of "su"
    "+Since"		-> {+DHr},
    "+SinceDoingSo"	-> {+YAlH},
    "+Start"		-> {+YAkoy},
    "+Stay"		-> {+YAkal},
    "+TM"		-> 0,		!! New flag indicating time words
!    "+VD"		-> "+VD",	!! Phonetic flag for vowel dropping
!    "+VF"		-> "+VF",	!! Phonetic flag for vowel fronting
    "+Verb"		-> 0,
    "+When"		-> {+YHncA},
    "+While"		-> {+Yken},
    "+With"		-> {+lH},
    "+Without"		-> {+sHz},	!! {+nsHz}
    "+WithoutBeingAbleToHaveDoneSo"	-> {+YAmAdAn},
    "+WithoutHavingDoneSo"		-> {+mAdAn},
    "+WithoutHavingDoneSo2"		-> {+mAksHzHn},
    "+Zero"		-> 0,
    "^DB"		-> 0		
];

define AorAr [{affet}|{ak}|{aktet}|{an}|{art}|{as}|{aş}|{at}|{ay}|{az}|{bahset}|{bak}|{bas}|{bat}|{biç}|{bin}|{bit}|{boğ}|{boz}|{böl}|{coş}|{çak}|{çal}|{çarp}|{çek}|{çık}|{çırp}|{çiz}|{çöz}|{değ}|{dik}|{dil}|{din}|{doğ}|{dol}|{don}|{dök}|{dön}|{döv}|{duy}|{düş}|{eğ}|{ek}|{em}|{emret}|{er}|{es}|{et}|{ez}|{farket}|{fethet}|{geç}|{gez}|{gir}|{git}|{giy}|{göç}|{gül}|{hallet}|{hapset}|{hisset}|{iç}|{in}|{it}|{kaç}|{kalk}|{kan}|{kap}|{kar}|{kat}|{katet}|{katlet}|{kay}|{kaybet}|{kes}|{keşfet}|{kıl}|{kır}|{kırp}|{kıy}|{kız}|{kon}|{kop}|{kork}|{koş}|{kov}|{koy}|{kur}|{kus}|{ov}|{ölç}|{öp}|{ör}|{ört}|{öv}|{reddet}|{saç}|{sar}|{sark}|{sars}|{sat}|{say}|{seç}|{sev}|{seyret}|{sez}|{sığ}|{sil}|{sok}|{sor}|{sök}|{sön}|{söv}|{sözet}|{sun}|{sür}|{sürt}|{süz}|{şaş}|{tak}|{taş}|{terket}|{tut}|{uç}|{um}|{uy}|{üz}|{yağ}|{yak}|{yan}|{yap}|{yar}|{yat}|{yaz}|{yen}|{yet}|{yık}|{yor}|{yut}|{yüz}|{zannet}];
define CausAr [{çık}|{çök}|{kop}];
define CausHr [{art}|{aş}|{bat}|{bit}|{doğ}|{doy}|{düş}|{duy}|{geç}|{iç}|{kaç}|{piş}|{şiş}|{taş}|{uç}|{vazgeç}|{yat}|{yit}];
define CausHt [{ak}|{çarp}|{kork}|{ürk}];
define Consonant [b|c|ç|d|f|g|ğ|h|j|k|l|m|n|p|r|s|ş|t|v|y|z];
define Vowel [a|e|ı|i|o|ö|u|ü];
define VowelAH [a|e|ı|i|o|ö|u|ü|A|H];
define PDC ["+Past"|"+Past2"|"+Desr"|"+Cond"];
define Alpha [Consonant|Vowel];
define NoDB \"^DB"*;

define AltCase [
	"+Abl" -> {+ndAn}, 
	"+Acc" -> {+nH},
	"+Dat" -> {+nA},
	"+Equ" -> {+ncA},
	"+Loc" -> {+ndA}
|| 
	["+P3sg"|"+P3pl"] _,
	"+Pron""+Rel""+A3sg""+Pnon" _,
	"+Adj""+Rel""^DB""+Noun""+Zero""+A3sg""+Pnon" _,
	"+P3" NoDB "+Pnon" _
];

define mlex AltCase;

define AltPersonPDC [
    "+A1pl" -> {+k},
    "+A1sg" -> {+m},
    "+A2pl" -> {+nHz},
    "+A2sg" -> {+n}	||  PDC _
];

define mlex [mlex .o. AltPersonPDC];

define AltPersonImp [
    "+A2pl" -> {+YHnHz},
    "+A2pl" -> {+YHn},
    "+A2sg" -> 0,
    "+A3pl" -> {+sHnlAr},
    "+A3sg" -> {+sHn}	||  "+Imp" _
];

define mlex [mlex .o. AltPersonImp];

define AltPersonImp2 [
    "+A2pl" -> {+nHzA},
    "+A2sg" -> {+nA}	|| "+Imp2" _
];

define mlex [mlex .o. AltPersonImp2];

define AltPersonNegAor [
    "+A1sg" -> {+m},
    "+A1pl" -> {+YHz}	|| "+Neg""+Aor" _
];

define mlex [mlex .o. AltPersonNegAor];

define AltPersonMisc [
    "+A1pl" -> {+lHm}	|| "+Opt" _ .o.
    "+A3pl" -> 0	|| "+PL" NoDB _
];

define mlex [mlex .o. AltPersonMisc];

define AltPossSu [
    "+P1pl"	-> {+YHmHz},
    "+P1sg"	-> {+YHm},
    "+P2pl"	-> {+YHnHz},
    "+P2sg"	-> {+YHn},
    "+P3sg"	-> {+YH}  || "+SU" NoDB "+A3sg" _ .o.
    "+Gen"	-> {+YHn} || .#. \["^DB"|"+P3"]* "+SU" \["^DB"|"+P3"]* "+A3sg" "+Pnon" _ .o.
    "+Pnon"	-> {+YH}  || "+P3" NoDB "+SU" NoDB _, "+SU" NoDB "+P3" NoDB _
];

define mlex [mlex .o. AltPossSu];

define AltPossMisc [
    "+P1sg" -> 0	|| "+P1" NoDB _ .o.
    "+P2sg" -> 0	|| "+P2" NoDB _ .o.
    "+P3pl" -> {+SH}	|| "+A3pl" _ , "+PL" NoDB _ .o.
    "+Pnon" -> {+SH}	|| "+P3" NoDB _ 
];

define mlex [mlex .o. AltPossMisc];

define AltAor [			# Default: +Hr
    "+Aor"	-> 0	|| "+Neg" _ ["+A1sg"|"+A1pl"] .o.
    "+Aor"	-> {+Ar} || "+AAR" NoDB _
].o.[
    "+Aor"	-> {+z}	|| "+Neg" _ .o.
    "+AorPart" -> {+z}	|| "+Neg""^DB""+Adj" _
];

define mlex [mlex .o. AltAor];

define AltPass [		# Deafult: +Hl
    "+Pass"	-> {+Hn} || [Vowel|l] "+Verb" NoDB "^DB""+Verb" _
];  # maybe we should do a flag for this too.

define mlex [mlex .o. AltPass];

define AltCaus [		# Default: +DHr
    # Set the first Caus
    "+Caus"	-> {+Ar}	|| "+CAR" NoDB "^DB""+Verb" _ .o.
    "+Caus"	-> {+Hr}	|| "+CHR" NoDB "^DB""+Verb" _ .o.
    "+Caus"	-> {+Ht}	|| "+CHT" NoDB "^DB""+Verb" _ .o.
    "+Caus"	-> {+t}		|| "+C0T" NoDB "^DB""+Verb" _ .o.
    "+Caus"	-> {+DHr}	|| .#. NoDB "^DB""+Verb" _
].o.[
    # Set repeating Caus suffixes
    "+Caus"	-> {+t}		// r "^DB""+Verb" _ ,,
    "+Caus"	-> {+DHr}	// t "^DB""+Verb" _
];

define mlex [mlex .o. AltCaus];

define AltNeg [
    "+Able"	-> 0		|| _ "+Neg" ,,
    "+Neg"	-> {+YAmA}	|| "+Able" _
];

define mlex [mlex .o. AltNeg];

define AltMisc [
    "+Agt"	-> {+YHcH}	|| "+Verb" NoDB "^DB" NoDB _ .o.
    "+AsIf"	-> {+CAsHnA}	|| "+Adverb" _ 
];

define mlex [mlex .o. AltMisc];

define mlex [mlex .o. Morphemes];

# define AltPhonetic [
#     {+Hr} -> {+Ar}	// .#. AorAr _ ,,
#     {+DH+} -> {+ydH+}, {+mHş} -> {+ymHş} // %+ ?* VowelAH _ ,,
#     {+DH} -> {+ydH} // %+ ?* VowelAH _ .#.
# ];

# define mlex [mlex .o. AltPhonetic];

push mlex

# read regex [
#     AltCase .o. 
#     AltPersonPDC .o. 
#     AltPersonImp .o. 
#     AltPersonImp2 .o. 
#     AltPersonNegAor .o. 
#     AltPersonMisc .o. 
#     AltPossSu .o.
#     AltPossMisc .o.
#     AltAor .o. 
#     AltNeg .o. 
#     AltMisc .o. 
#     Morphemes .o. 		# Has to follow non-phonetic alternations
#     AltPhonetic			# Has to be at the end
# ];
